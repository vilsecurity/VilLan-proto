syntax = "proto3";

package VilSecurity.spiderweb.proto;

// -------------------------------- //
//         Exposed services         //
// -------------------------------- //
service Worker {
  rpc notify_epoch (GreetRequest) returns (GreetResponse);
}

service Master {
  rpc notify_commit (NotifyCommitRequest) returns (NotifyCommitResponse);
  rpc latest_epoch (LatestEpochRequest) returns (LatestEpochResponse);
}

service Storage {
  rpc store_commit (stream StoreCommitRequest) returns (StoreCommitResponse);

  rpc retrieve_epoch (RetreiveEpochRequest) returns (stream RetreiveEpochResponse);
}

service Reader {}
service Root {}

// This can only be exposed to nodes with the Reader role
service Accessor {
  // Don't allow sensors to read stored private data
  rpc retrieve_commit (RetrieveCommitRequest) returns (stream RetrieveCommitResponse);
}

// Exposed only to nodes with the Master role
//
// Make sure to clean this up after a node is kicked out!
service Cabal {
  rpc share (stream ShareRequest) returns (ShareResponse);
  rpc submit (SubmitRequest) returns (SubmitResponse);
  rpc selected (stream SelectedRequest) returns (SelectedResponse);
}

// -------------------------------- //
//       Actual rpc messages        //
// -------------------------------- //

message GreetRequest {
  Hash epoch_digest = 1;
}
message GreetResponse {}

message NotifyCommitRequest {
  Hash commit_digest = 1;
  Signature commit_signature = 2;
}

message NotifyCommitResponse {}

message StoreCommitRequest {
  oneof type {
    Signature commit_signature = 1;
    bytes commit_part = 2;
  }
}

message LatestEpochRequest {}

message LatestEpochResponse {
  Hash epoch_digest = 1;
}

message StoreCommitResponse {
  Hash commit_digest = 1;
}

message RetreiveEpochRequest {
  Hash epoch = 1;
}

message RetreiveEpochResponse {
  bytes epoch_part = 1;
}

message RetrieveCommitRequest {
  Hash commit_digest = 1;
}

message RetrieveCommitResponse {
  // This should deserialise into a Commit
  bytes commit_part = 1;
}

message ShareRequest {
  SignedCommitRef commit_ref = 1;
}

message ShareResponse {}

message SubmitRequest {
  bytes epoch_part = 1;
}

message SubmitResponse {}

message SelectedRequest {
  Hash epoch_digest = 1;
  Signature signature = 2;
}

message SelectedResponse {}

// -------------------------------- //
//        Component messages        //
// -------------------------------- //

message SecureEpoch {
  bytes epoch = 1;
  repeated Signature epoch_signature = 2;
}

message Epoch {
  Hash previous_epoch = 1;

  Time created = 2;

  repeated SignedCommitRef commits = 3;

  repeated NodeState nodes = 4;
  repeated SensorState sensors = 5;
  LimitCfg limits = 6;
}

message SignedCommitRef {
  Hash commit_digest = 1;
  Signature commit_signature = 2;
}

message SensorCfgChange {
  NodeId target = 1;
  SensorCfg new_state = 2;
}

message NodeState {
  NodeRoles roles = 1;
  // A nodes last seen top nonce
  uint64 top_nonce = 2;
}

message NodeRoles {
  bool root = 1;
  bool master = 2;
  bool worker = 3;
  bool storage = 4;
  bool reader = 5;
}

message NodeRolesChange {
  NodeId target = 1;
  NodeRoles new_roles = 2;
}

message Commit {
  // This MUST strictly increase for each NodeId
  uint64 nonce = 1;

  oneof type {
    bytes data = 2;
    NodeRolesChange node_roles = 3;
    Limits set_limits = 4;
    NodeId sensor_add = 5;
    NodeId sensor_remove = 6;
  }
}

message SensorState {
  NodeId id = 1;
}

message Limits {
  // The stores MAY refuse to store anything over this size
  uint64 max_store_bytes_per_epoch = 1;
  uint64 max_commits_per_epoch = 2;
}

// An X.509 cert
message NodeId {
  bytes cert = 1;
}

// An X.509 cert with a signature of a blake2s hash
message Signature {
  NodeId signer = 1;
  bytes dat = 2;
}

// A blake2s hash
message Hash {
  bytes data = 1;
}

message Time {
  uint64 usec = 1;
}
